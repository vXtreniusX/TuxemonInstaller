#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 5.6
#  in conjunction with Tcl version 8.6
#    Feb 18, 2021 05:08:15 PM CET  platform: Windows NT # (Windows 10)

# Sorry for autogenerated code (Propably still cleaner than mine)

# Enable original backend
original_backend = False

import sys

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

if original_backend:
	import Installer_backend_base as Installer_backend
else:
	import Installer_backend

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    Installer_backend.set_Tk_var()
    top = Toplevel1 (root)
    Installer_backend.init(root, top)
    root.mainloop()

w = None
def create_Toplevel1(rt, *args, **kwargs):
    '''Starting point when module is imported by another module.
       Correct form of call: 'create_Toplevel1(root, *args, **kwargs)' .'''
    global w, w_win, root
    #rt = root
    root = rt
    w = tk.Toplevel (root)
    Installer_backend.set_Tk_var()
    top = Toplevel1 (w)
    Installer_backend.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_Toplevel1():
    global w
    w.destroy()
    w = None

class Toplevel1:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'

        top.geometry("407x325+739+223")
        top.minsize(148, 1)
        top.maxsize(3844, 1409)
        top.resizable(1,  1)
        top.title("Tuxemon Installer")
        top.configure(background="#d9d9d9")

        self.Install_Button = tk.Button(top)
        self.Install_Button.place(relx=0.319, rely=0.862, height=33, width=156)
        self.Install_Button.configure(activebackground="#ececec")
        self.Install_Button.configure(activeforeground="#000000")
        self.Install_Button.configure(background="#d9d9d9")
        self.Install_Button.configure(command=Installer_backend.Start_Install)
        self.Install_Button.configure(disabledforeground="#a3a3a3")
        self.Install_Button.configure(foreground="#000000")
        self.Install_Button.configure(highlightbackground="#d9d9d9")
        self.Install_Button.configure(highlightcolor="black")
        self.Install_Button.configure(pady="0")
        self.Install_Button.configure(text='''Install''')
        self.tooltip_font = "TkDefaultFont"
        self.Install_Button_tooltip = \
        ToolTip(self.Install_Button, self.tooltip_font, '''Starts the installation''')

        self.Path_Entry = tk.Entry(top)
        self.Path_Entry.place(relx=0.025, rely=0.615, height=24, relwidth=0.919)
        self.Path_Entry.configure(background="white")
        self.Path_Entry.configure(disabledforeground="#a3a3a3")
        self.Path_Entry.configure(font="TkFixedFont")
        self.Path_Entry.configure(foreground="#000000")
        self.Path_Entry.configure(insertbackground="black")
        self.Path_Entry.configure(textvariable=Installer_backend.Install_path)
        self.tooltip_font = "TkDefaultFont"
        self.Path_Entry_tooltip = \
        ToolTip(self.Path_Entry, self.tooltip_font, '''Path, where the game will be installed''')

        self.PathToInstall_Label = tk.Label(top)
        self.PathToInstall_Label.place(relx=0.0, rely=0.523, height=26
                , width=151)
        self.PathToInstall_Label.configure(background="#d9d9d9")
        self.PathToInstall_Label.configure(disabledforeground="#a3a3a3")
        self.PathToInstall_Label.configure(foreground="#000000")
        self.PathToInstall_Label.configure(text='''Path for installation''')

        self.Path_select = tk.Button(top)
        self.Path_select.place(relx=0.916, rely=0.615, height=23, width=26)
        self.Path_select.configure(activebackground="#ececec")
        self.Path_select.configure(activeforeground="#000000")
        self.Path_select.configure(background="#d9d9d9")
        self.Path_select.configure(command=Installer_backend.select_path)
        self.Path_select.configure(disabledforeground="#a3a3a3")
        self.Path_select.configure(foreground="#000000")
        self.Path_select.configure(highlightbackground="#d9d9d9")
        self.Path_select.configure(highlightcolor="black")
        self.Path_select.configure(pady="0")
        self.Path_select.configure(text='''...''')

        self.menubar = tk.Menu(top,font="TkMenuFont",bg=_bgcolor,fg=_fgcolor)
        top.configure(menu = self.menubar)

        self.Title = tk.Label(top)
        self.Title.place(relx=0.0, rely=0.0, height=46, width=412)
        self.Title.configure(background="#d9d9d9")
        self.Title.configure(disabledforeground="#a3a3a3")
        self.Title.configure(foreground="#000000")
        self.Title.configure(text='''Tuxemon Installation''')

        self.Desc = tk.Label(top)
        self.Desc.place(relx=0.025, rely=0.092, height=106, width=382)
        self.Desc.configure(background="#d9d9d9")
        self.Desc.configure(disabledforeground="#a3a3a3")
        self.Desc.configure(foreground="#000000")
        self.Desc.configure(text='''Welcome to the Tuxemon installer!
Select the path below, and click Install
to install the game!''')

# ======================================================
# Support code for Balloon Help (also called tooltips).
# Found the original code at:
# http://code.activestate.com/recipes/576688-tooltip-for-tkinter/
# Modified by Rozen to remove Tkinter import statements and to receive
# the font as an argument.
# ======================================================

from time import time, localtime, strftime

class ToolTip(tk.Toplevel):
    """
    Provides a ToolTip widget for Tkinter.
    To apply a ToolTip to any Tkinter widget, simply pass the widget to the
    ToolTip constructor
    """
    def __init__(self, wdgt, tooltip_font, msg=None, msgFunc=None,
                 delay=0.5, follow=True):
        """
        Initialize the ToolTip

        Arguments:
          wdgt: The widget this ToolTip is assigned to
          tooltip_font: Font to be used
          msg:  A static string message assigned to the ToolTip
          msgFunc: A function that retrieves a string to use as the ToolTip text
          delay:   The delay in seconds before the ToolTip appears(may be float)
          follow:  If True, the ToolTip follows motion, otherwise hides
        """
        self.wdgt = wdgt
        # The parent of the ToolTip is the parent of the ToolTips widget
        self.parent = self.wdgt.master
        # Initalise the Toplevel
        tk.Toplevel.__init__(self, self.parent, bg='black', padx=1, pady=1)
        # Hide initially
        self.withdraw()
        # The ToolTip Toplevel should have no frame or title bar
        self.overrideredirect(True)

        # The msgVar will contain the text displayed by the ToolTip
        self.msgVar = tk.StringVar()
        if msg is None:
            self.msgVar.set('No message provided')
        else:
            self.msgVar.set(msg)
        self.msgFunc = msgFunc
        self.delay = delay
        self.follow = follow
        self.visible = 0
        self.lastMotion = 0
        # The text of the ToolTip is displayed in a Message widget
        tk.Message(self, textvariable=self.msgVar, bg='#FFFFDD',
                font=tooltip_font,
                aspect=1000).grid()

        # Add bindings to the widget.  This will NOT override
        # bindings that the widget already has
        self.wdgt.bind('<Enter>', self.spawn, '+')
        self.wdgt.bind('<Leave>', self.hide, '+')
        self.wdgt.bind('<Motion>', self.move, '+')

    def spawn(self, event=None):
        """
        Spawn the ToolTip.  This simply makes the ToolTip eligible for display.
        Usually this is caused by entering the widget

        Arguments:
          event: The event that called this funciton
        """
        self.visible = 1
        # The after function takes a time argument in milliseconds
        self.after(int(self.delay * 1000), self.show)

    def show(self):
        """
        Displays the ToolTip if the time delay has been long enough
        """
        if self.visible == 1 and time() - self.lastMotion > self.delay:
            self.visible = 2
        if self.visible == 2:
            self.deiconify()

    def move(self, event):
        """
        Processes motion within the widget.
        Arguments:
          event: The event that called this function
        """
        self.lastMotion = time()
        # If the follow flag is not set, motion within the
        # widget will make the ToolTip disappear
        #
        if self.follow is False:
            self.withdraw()
            self.visible = 1

        # Offset the ToolTip 10x10 pixes southwest of the pointer
        self.geometry('+%i+%i' % (event.x_root+20, event.y_root-10))
        try:
            # Try to call the message function.  Will not change
            # the message if the message function is None or
            # the message function fails
            self.msgVar.set(self.msgFunc())
        except:
            pass
        self.after(int(self.delay * 1000), self.show)

    def hide(self, event=None):
        """
        Hides the ToolTip.  Usually this is caused by leaving the widget
        Arguments:
          event: The event that called this function
        """
        self.visible = 0
        self.withdraw()

    def update(self, msg):
        """
        Updates the Tooltip with a new message. Added by Rozen
        """
        self.msgVar.set(msg)

# ===========================================================
#                   End of Class ToolTip
# ===========================================================

if __name__ == '__main__':
    vp_start_gui()





